#include<bits/stdc++.h>

using namespace std;
void Topological(vector<int> adj[], int V) 
{ 
    vector<int> in_degree(V, 0); 
    for (int u = 0; u < V; u++) { 
        for (auto v : adj[u]) 
            in_degree[v]++; 
    } 
    vector<int> res;
    queue<int> q; 
    for (int i = 0; i < V; i++) 
        if (in_degree[i] == 0) 
            q.push(i); 
    int cnt=0;
    while (!q.empty()) { 
        int u = q.front(); 
        res.push_back(u);
        q.pop();
        for (auto itr = adj[u].begin(); itr != adj[u].end(); itr++) 
            if (--in_degree[*itr] == 0) 
                q.push(*itr); 
        cnt++; 
    }  
    if (cnt != V)  
        cout<<"Given graph is not DAG"; 
    else{
        for(int r : res)
            cout<<r<<" ";
    }
         
} 

void add_edge(vector<int> graph[], int u, int v){
    graph[u].push_back(v);
}

void print(vector<int> graph[], int n){
    cout<<"Adjency List Representation \n";
    for(int i=0; i<n; i++){
        cout<<i;
        for(int v : graph[i])
            cout<<" -> "<<v;
        cout<<endl;
    }
}
int main(){
    int n;
    cout<<"Enter number of nodes(V) : ";
    cin>>n;
    vector<int> graph[n];
    vector<vector<int> > mat(n,vector<int>(n,0));
    char ch;
    cout<<"Enter edge (Y/N) : ";
    cin>>ch;
    while(ch!='N'){
        int u,v;
        cin>>u>>v;
        add_edge(graph, u, v);
        cout<<"Enter edge (Y/N) : ";
        cin>>ch;
    }
    print(graph,n);
    Topological(graph, n);
        
}
